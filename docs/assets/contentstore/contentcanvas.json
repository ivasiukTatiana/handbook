{
  "contentcanvas": [
    {
      "id": "canvas0",
      "href": "canvas#canvas0",
      "title": "HTML5 елемент <canvas>",
      "article": "<p><b>API</b> (Application Programming Interface) - прикладний програмний інтерфейс, який дозволяє розробникам використовувати готові блоки для побудови програм.</p><p>HTML тег <b>&lt;canvas&gt;</b> - це контейнер для графіки, який використовується, щоб за допомогою скриптів, зазвичай JavaScript, динамічно створювати різні об'єкти, ігри, зображення, анімації, трансформувати їх та змінювати їх властивості. Для браузерів, які не підтримують &lt;canvas&gt;, всередині контейнера розміщується альтернативний контент. Такі браузери будуть ігнорувати контейнер і оброблятимуть лише його вміст. Інші браузери будуть ігнорувати вміст контейнера, а оброблять тільки сам контейнер:</p><pre><code>&lt;canvas <span class=\"color-red\">id</span>=\"myCanvas\" <span class=\"color-red\">width</span>=\"640\" <span class=\"color-red\">height</span>=\"480\"&gt;\n  &lt;p&gt;Ваш браузер не підтримує &amp;lt;canvas&amp;gt;&lt;/p&gt;\n&lt;/canvas&gt;</code></pre><p>Обов'язкові атрибути <b>width</b> і <b>height</b> позначають довжину і висоту області малювання відповідно. При ініціалізації тег порожній і для малювання необхідно отримати доступ до оброблюваного контексту:</p><pre><code><b>let</b> canvas = document.getElementById('myCanvas'); <i> // отримуємо доступ до елемента &lt;canvas&gt; по id</i>\n<b>let</b> context = canvas.getContext('2d'); <i> // отримуємо 2D-контекст полотна для додавання об'єктів</i></code></pre><p>Метод <b>getContext()</b> повертає контекст полотна або <b>null</b>, якщо ідентифікатор контексту не підтримується.</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Canvas&lt;/title&gt;\n\n    &lt;script&gt;\n      window.onload = <b>function</b>() &#123;\n        <b>let</b> canvas = document.getElementById('myCanvas');\n\n        <i>//перевірка підтримки Canvas API засобами JavaScript:</i>\n        <b>if</b> (canvas.getContext)&#123; <i>// перевіряєм присутність метода getContext</i>\n          <b>let</b> context = canvas.getContext('2d'); <i>// отримуємо 2D-контекст полотна для додавання об'єктів</i>\n\n          <i>// тут розміщується код малювання на canvas</i>\n\n        &#125; <b>else</b> &#123;\n\n          <i>// тут розміщується код, який обробляється якщо браузер не підтримує Canvas API</i>\n        &#125;\n      &#125;\n    &lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;canvas <span class=\"color-red\">id</span>=\"myCanvas\" <span class=\"color-red\">width</span>=\"640\" <span class=\"color-red\">height</span>=\"480\"&gt;\n        &lt;p&gt;Ваш браузер не підтримує &amp;lt;canvas&amp;gt;&lt;/p&gt;\n    &lt;/canvas&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>"
    },
    {
      "id": "canvas1",
      "href": "canvas#canvas1",
      "title": "Лінії і контури",
      "article": "<table class=\"table\"><tr><td colspan=\"2\"><b>beginPath()</b> метод починає побудову контура малювання. Кожен новий виклик beginPath() дозволяє розпочати нову фігуру.</td></tr><tr><td colspan=\"2\"><b>moveTo(x, y)</b> метод переміщує віртуальний олівець в задану координатами точку полотна. При ініціалізації полотна, або після виклику методу beginPath(), початкова точка встановлена в позиції (0, 0). Метод moveTo(x, y) застосовується для перенесення стартової позиції в потрібне місце</td></tr><tr><td colspan=\"2\"><b>lineTo(x, y)</b> метод малює лінію до заданої точки. У якості стартової служить точка, задана методом moveTo() або аргументом попереднього lineTo()</td></tr><tr><td colspan=\"2\"><b>lineWidth</b> властивість встановлює товщину лінії</td></tr><tr><td colspan=\"2\"><b>lineCap</b> властивість задає стиль закінчень лінії: butt <mat-icon class=\"material-icons md-18\" #tooltip=\"matTooltip\" matTooltip=\"плоске завершення ліній (за замовчуванням)\" matTooltipClass=\"tooltip-style\" matTooltipPosition=\"right\">info</mat-icon> <b>|</b> round <mat-icon class=\"material-icons md-18\" #tooltip=\"matTooltip\" matTooltip=\"закруглене завершення ліній\" matTooltipClass=\"tooltip-style\" matTooltipPosition=\"right\">info</mat-icon> <b>|</b> square <mat-icon class=\"material-icons md-18\" #tooltip=\"matTooltip\" matTooltip=\"квадратне завершення ліній\" matTooltipClass=\"tooltip-style\" matTooltipPosition=\"right\">info</mat-icon></td></tr><tr><td colspan=\"2\"><b>strokeStyle</b> властивість встановлює колір контура</td></tr><tr><td colspan=\"2\"><b>stroke()</b> метод робить побудований контур видимим. Призначений для відображення ліній.</td></tr><tr><td colspan=\"2\"><b>closePath()</b> метод завершує побудову контура малювання. Завжди намагається замкнути контур, що вийшов, будуючи пряму лінію від поточної точки до початкової</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"stroke\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\">context.lineWidth = 10; <i> // встановлює товщину лінії</i><br>context.lineCap = \"round\"; <i> // задає заокруглене завершення ліній</i><br>context.strokeStyle = \"green\"; <i> // встановлює колір контура</i><br>context.beginPath(); <i> // починає побудову контура</i><br>context.moveTo(20, 20); <i> // переміщує віртуальний олівець в задану координатами точку полотна</i><br>context.lineTo(100, 100); <i> // малює лінію до заданої точки</i><br>context.lineTo(125, 75);<br>context.stroke(); <i> // робить побудовану лінію видимою</i></td></tr></table>"
    },
    {
      "id": "canvas2",
      "href": "canvas#canvas2",
      "title": "Заливка і тінь",
      "article": "<table class=\"table\"><tr><td><b>fillStyle</b> властивість встановлює колір заливки. Колір задається так само як в CSS. За замовчуванням для заливки використовується чорний колір. Стилі для заливки fillStyle і контура strokeStyle мають глобальний параметр. Задана властивість застосується для всіх елементів, поки не буде змінена</td></tr><tr><td><b>fill()</b> метод робить заливку фігури кольором, заданим властивістю fillStyle</td></tr><tr><td><b>shadowBlur</b> властивість встановлює розмір тіні фігури</td></tr><tr><td><b>shadowColor</b> властивість встановлює колір тіні фігури</td></tr><tr><td><b>shadowOffsetX</b> властивість встановлює зміщення тіні фігури по осі X</td></tr><tr><td><b>shadowOffsetY</b> властивість встановлює зміщення тіні фігури по осі Y</td></tr></table>"
    },
    {
      "id": "canvas3",
      "href": "canvas#canvas3",
      "title": "Прямокутники",
      "article": "<table class=\"table\"><tr><td colspan=\"2\"><b>strokeRect(x, y, width, height)</b> метод малює контур прямокутника кольором, заданим властивістю strokeStyle</td></tr><tr><td colspan=\"2\"><b>fillRect(x, y, width, height)</b>метод заливає прямокутник кольором, заданим властивістю fillStyle</td></tr><tr><td colspan=\"2\"><b>clearRect(x, y, width, height)</b> метод очищає зазначену прямокутну область</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"strokerect\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\">context.fillStyle = \"rgb(192, 192, 192)\"; <i> // встановлює колір заливки</i><br>context.fillRect(18, 33, 89, 64); <i> // заливає заданий прямокутник</i><br>context.lineWidth = 3; <i> // встановлює товщину лінії</i><br>context.strokeStyle = \"#000\"; <i> // встановлює колір контура</i><br>context.shadowBlur = 3; <i> // встановлює розмір тіні фігури</i><br>context.shadowColor = \"grey\"; <i> // встановлює колір тіні фігури</i><br>context.shadowOffsetX = 5; <i> // встановлює зміщення тіні фігури по осі X</i><br>context.shadowOffsetY = 5; <i> // встановлює зміщення тіні фігури по осі Y</i><br>context.strokeRect(15, 30, 95, 70); <i> // малює контур прямокутника</i></td></tr></table>"
    },
    {
      "id": "canvas4",
      "href": "canvas#canvas4",
      "title": "Кола і дуги",
      "article": "<table class=\"table\"><tr><td colspan=\"2\"><b>arc(centerX, centerY, radius, startAngle, endAngle, напрямок обертання)</b> метод малює коло або його частину</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"arc\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\">centerX, centerY – координати центру кола<br>radius – радіус кола<br>start, end - початковий і кінцевий кути дуги в радіанах: (Math.PI/180)*градуси.<br>360° = Math.PI*2 радіан<br>напрямок обертання: false – за годинниковою стрілкою, true - проти годинникової стрілки<br><br>context.arc(75, 75, 45, 0, Math.PI*1.5, false)</td></tr><tr><td colspan=\"2\"><b>arcTo(x1, y1, x2, y2, radius)</b> метод створює дугу / криву між двома дотичними прямими</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"arcto\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\">context.moveTo(38, 32); <i> // start</i><br>context.arcTo(100, 33, 105, 87, 60)</td></tr><tr><td colspan=\"2\"><b>quadraticCurveTo(controlX, controlY, endX, endY)</b> метод малює квадратичную криву Безьє від поточної точки на полотні до зазначеної через проміжну (контрольну)</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"quadratic\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\">context.moveTo(15, 20); <i> // start</i><br>context.quadraticCurveTo(20, 130, 130, 20);</td></tr><tr><td colspan=\"2\"><b>bezierCurveTo(controlX1, controlY1, controlX2, controlY2, endX, endY)</b> метод малює кубічну криву Безьє від поточної точки на полотні до зазначеної через проміжні (контрольні) точки</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"bezier\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\">context.moveTo(15, 20); <i> // start</i><br>context.bezierCurveTo(20, 110, 130, 110, 130, 20);</td></tr></table>"
    },
    {
      "id": "canvas5",
      "href": "canvas#canvas5",
      "title": "Текст",
      "article": "<table class=\"table\"><tr><td colspan=\"2\"><b>fillText('text', x, y)</b> метод виводить вказаний текст 'text' кольором, який задано властивістю fillStyle. Аргументи x і y задають позицію, з якої починається виведення тексту<br></td></tr><tr><td colspan=\"2\"><b>strokeText('text', x, y)</b> метод виводить контур заданого тексту починаючи з вказаних координат (x, y) кольором, який задається властивістю strokeStyle. Метод використовується для обведення літер</td></tr><tr><td colspan=\"2\"><b>font</b> задає властивості шрифта тексту. Може містити все, що властивість CSS font: стиль шрифту, насиченість, розмір, сімейство гарнітур </td></tr><tr><td colspan=\"2\" class=\"td-code\">context.font=\"italic bold 12px arial\";</td></tr><tr><td colspan=\"2\"><b>textAlign</b> властивість задає позицію текста по горизонталі: left <b> | </b> right <b> | </b> center</td></tr><tr><td colspan=\"2\"><b>textBaseline</b> властивість задає позицію текста по вертикалі: top <b> | </b> middle <b> | </b> bottom</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"text\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\">context.fillStyle = \"rgba(35, 255, 35, 1.0)\";  <i> // встановлює колір заливки</i><br>context.strokeStyle = \"rgba(255, 15, 15, 1.0)\"; <i> // встановлює колір контура</i><br>context.lineWidth = 2; <i> // встановлює товщину лінії</i><br>context.font = \"bold 32px sans-serif\"; <i> // задає розмір, стиль і шрифт тексту</i><br>context.fillText(\"Привіт!\", 10, 75); <i> // виводить заданий текст починаючи з вказаної позиції і заповнює кольором fillStyle</i><br>context.strokeText(\"Привіт!\", 12, 77); <i> // виводить контур заданого тексту починаючи з вказаної позиції кольором strokeStyle</i></td></tr></table>"
    },
    {
      "id": "canvas6",
      "href": "canvas#canvas6",
      "title": "Градієнт",
      "article": "<table class=\"table\"><tr><td colspan=\"2\"><b>createLinearGradient(x0, y0, x1, y1)</b> метод створює об'єкт лінійного градієнта. Створений об'єкт використовується в якості значення властивості strokeStyle або fillStyle. Для визначення різних кольорів і їх розташування в градієнті використовується метод addColorStop()</td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"lngradient\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\"><i> // x0, y0 - координати початкової точки градієнта</i><br><i> // x1, y1 - координати кінцевої точки градієнта</i><br><br><b>let</b> gradient = context.createLinearGradient(5, 5, 140, 5);<br>gradient.addColorStop(0, 'red');<br>gradient.addColorStop(0.33, 'orange');<br>gradient.addColorStop(0.66, 'yellow');<br>gradient.addColorStop(1, 'lime');<br>context.fillStyle = gradient;<br>context.fillRect(5, 5, 140, 140);</td></tr><tr><td colspan=\"2\"><b>createRadialGradient(x0, y0, r0, x1, y1, r1)</b> метод створює об'єкт радіального / кругового градієнта.<br></td></tr><tr><td class=\"td-canvas\"><canvas #canvas id=\"rdgradient\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td class=\"td-code\"><i> // x0, y0, r0 - координати і радіус початкового кола градієнта</i><br><i> // x1, y1, r1 - координати і радіус кінцевого кола градієнта</i><br><br><b>let</b> gradient=context.createRadialGradient(75, 150, 50, 75, 150, 170);<br>gradient.addColorStop(0, 'orange');<br>gradient.addColorStop(0.45, 'yellow');<br>gradient.addColorStop(1, 'aqua');<br>context.fillStyle = gradient;<br>context.fillRect(5, 5, 140, 140);<br></td></tr><tr><td colspan=\"2\"><b>addColorStop(позиція, колір)</b> метод визначає колір і позицію зупинки в об'єкті градієнта, використовується разом з методом createLinearGradient() або createRadialGradient(). Для відображення градієнта, необхідно створити хоча б одну колірну зупинку. Може викликатися будь-яке число раз, щоб змінювати градієнт.<br>позиція - значення від 0.0 до 1.0, яке представляє позицію між початком і кінцем градієнта<br>колір - CSS значення кольору, який відображатиметься в позиції зупинки</td></tr></table>"
    },
    {
      "id": "canvas7",
      "href": "canvas#canvas7",
      "title": "Зображення",
      "article": "<table class=\"table\"><tr><td rowspan=\"2\" class=\"td-canvas\"><canvas #canvas id=\"image3\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td><b>drawImage(image, dx, dy)</b> метод виводить зображення image за заданими координатами dx, dy. Перед викликом метода необхідно переконатися, що зображення завантажене (наприклад, помістити виклик методу drawImage() в обробник події document.getElementById(\"imageID\").onload).</td></tr><tr><td class=\"td-code\"><b>let</b> img = new Image(); <i> // Створюєм малюнок</i><br>img.src = \"images/img.jpg\"; <i> // Визначаєм адрусу малюнку</i><br>img.onload = <b>function</b>() &#123; ctx.drawImage(img, 0, 0); &#125;; <i> // Виводим малюнок на canvas після завантаження</i></td></tr><tr><td rowspan=\"2\" class=\"td-canvas\"><canvas #canvas id=\"image5\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td><b>drawImage(image, dx, dy, dw, dh)</b> - виводить малюнок image за заданими координатами dx, dy та розмірами dw (ширина) і dh (висота). Використовується для збільшення / зменшення розміру зображення</td></tr><tr><td class=\"td-code\"><b>let</b> img = new Image(); <i> // Створюєм малюнок</i><br>img.src = \"images/img.jpg\"; <i> // Визначаєм адрусу малюнку</i><br>img.onload = <b>function</b>() &#123; ctx.drawImage(img, 25, 25, 100, 100); &#125;; <i> // Виводим малюнок на canvas після завантаження. Зменшуємо розмір малюнку</i></td></tr><tr><td rowspan=\"2\" class=\"td-canvas\"><canvas #canvas id=\"image9\" width='150' height='150'><p>Ваш браузер не підтримує &lt;canvas&gt;</p></canvas></td><td><b>drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)</b> - виводить малюнок image, обрізаний по прямокутнику з координатами на малюнку sx, sy та розмірами  на малюнку sw (ширина) і sh (висота) за заданими координатами на полотні dx, dy та розмірами на полотні dw (ширина) і dh (висота). Використовується для виводу частини зображення.</td></tr><tr><td class=\"td-code\"><b>let</b> img = new Image(); <i> // Створюєм малюнок</i><br>img.src = \"images/img.jpg\"; <i> // Визначаєм адрусу малюнку</i><br>img.onload = <b>function</b>() &#123; ctx.drawImage(img, 30, 15, 100, 50, 30, 50, 100, 50); &#125;; <i> // Виводим частину малюнку на canvas після завантаження</i></td></tr></table>"
    }
  ]
}
